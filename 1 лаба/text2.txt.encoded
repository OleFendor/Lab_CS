SE9SQVRJTwpUaGF0IGNhbiBJOwpBdCBsZWFzdCwgdGhlIHdoaXNwZXIgZ29lcyBz
by4gT3VyIGxhc3Qga2luZywKV2hvc2UgaW1hZ2UgZXZlbiBidXQgbm93IGFwcGVh
cidkIHRvIHVzLApXYXMsIGFzIHlvdSBrbm93LCBieSBGb3J0aW5icmFzIG9mIE5v
cndheSwKVGhlcmV0byBwcmljaydkIG9uIGJ5IGEgbW9zdCBlbXVsYXRlIHByaWRl
LApEYXJlZCB0byB0aGUgY29tYmF0OyBpbiB3aGljaCBvdXIgdmFsaWFudCBIYW1s
ZXQtLQpGb3Igc28gdGhpcyBzaWRlIG9mIG91ciBrbm93biB3b3JsZCBlc3RlZW0n
ZCBoaW0tLQpEaWQgc2xheSB0aGlzIEZvcnRpbmJyYXM7IHdobyBieSBhIHNlYWwn
ZCBjb21wYWN0LApXZWxsIHJhdGlmaWVkIGJ5IGxhdyBhbmQgaGVyYWxkcnksCkRp
ZCBmb3JmZWl0LCB3aXRoIGhpcyBsaWZlLCBhbGwgdGhvc2UgaGlzIGxhbmRzCldo
aWNoIGhlIHN0b29kIHNlaXplZCBvZiwgdG8gdGhlIGNvbnF1ZXJvcjoKQWdhaW5z
dCB0aGUgd2hpY2gsIGEgbW9pZXR5IGNvbXBldGVudApXYXMgZ2FnZWQgYnkgb3Vy
IGtpbmc7IHdoaWNoIGhhZCByZXR1cm4nZApUbyB0aGUgaW5oZXJpdGFuY2Ugb2Yg
Rm9ydGluYnJhcywKSGFkIGhlIGJlZW4gdmFucXVpc2hlcjsgYXMsIGJ5IHRoZSBz
YW1lIGNvdmVuYW50LApBbmQgY2FycmlhZ2Ugb2YgdGhlIGFydGljbGUgZGVzaWdu
J2QsCkhpcyBmZWxsIHRvIEhhbWxldC4gTm93LCBzaXIsIHlvdW5nIEZvcnRpbmJy
YXMsCk9mIHVuaW1wcm92ZWQgbWV0dGxlIGhvdCBhbmQgZnVsbCwKSGF0aCBpbiB0
aGUgc2tpcnRzIG9mIE5vcndheSBoZXJlIGFuZCB0aGVyZQpTaGFyaydkIHVwIGEg
bGlzdCBvZiBsYXdsZXNzIHJlc29sdXRlcywKRm9yIGZvb2QgYW5kIGRpZXQsIHRv
IHNvbWUgZW50ZXJwcmlzZQpUaGF0IGhhdGggYSBzdG9tYWNoIGluJ3Q7IHdoaWNo
IGlzIG5vIG90aGVyLS0KQXMgaXQgZG90aCB3ZWxsIGFwcGVhciB1bnRvIG91ciBz
dGF0ZS0tCkJ1dCB0byByZWNvdmVyIG9mIHVzLCBieSBzdHJvbmcgaGFuZApBbmQg
dGVybXMgY29tcHVsc2F0b3J5LCB0aG9zZSBmb3Jlc2FpZCBsYW5kcwpTbyBieSBo
aXMgZmF0aGVyIGxvc3Q6IGFuZCB0aGlzLCBJIHRha2UgaXQsCklzIHRoZSBtYWlu
IG1vdGl2ZSBvZiBvdXIgcHJlcGFyYXRpb25zLApUaGUgc291cmNlIG9mIHRoaXMg
b3VyIHdhdGNoIGFuZCB0aGUgY2hpZWYgaGVhZApPZiB0aGlzIHBvc3QtaGFzdGUg
YW5kIHJvbWFnZSBpbiB0aGUgbGFuZC4KQkVSTkFSRE8KSSB0aGluayBpdCBiZSBu
byBvdGhlciBidXQgZSdlbiBzbzoKV2VsbCBtYXkgaXQgc29ydCB0aGF0IHRoaXMg
cG9ydGVudG91cyBmaWd1cmUKQ29tZXMgYXJtZWQgdGhyb3VnaCBvdXIgd2F0Y2g7
IHNvIGxpa2UgdGhlIGtpbmcKVGhhdCB3YXMgYW5kIGlzIHRoZSBxdWVzdGlvbiBv
ZiB0aGVzZSB3YXJzLgpIT1JBVElPCkEgbW90ZSBpdCBpcyB0byB0cm91YmxlIHRo
ZSBtaW5kJ3MgZXllLgpJbiB0aGUgbW9zdCBoaWdoIGFuZCBwYWxteSBzdGF0ZSBv
ZiBSb21lLApBIGxpdHRsZSBlcmUgdGhlIG1pZ2h0aWVzdCBKdWxpdXMgZmVsbCwK
VGhlIGdyYXZlcyBzdG9vZCB0ZW5hbnRsZXNzIGFuZCB0aGUgc2hlZXRlZCBkZWFk
CkRpZCBzcXVlYWsgYW5kIGdpYmJlciBpbiB0aGUgUm9tYW4gc3RyZWV0czoKQXMg
c3RhcnMgd2l0aCB0cmFpbnMgb2YgZmlyZSBhbmQgZGV3cyBvZiBibG9vZCwKRGlz
YXN0ZXJzIGluIHRoZSBzdW47IGFuZCB0aGUgbW9pc3Qgc3RhcgpVcG9uIHdob3Nl
IGluZmx1ZW5jZSBOZXB0dW5lJ3MgZW1waXJlIHN0YW5kcwpXYXMgc2ljayBhbG1v
c3QgdG8gZG9vbXNkYXkgd2l0aCBlY2xpcHNlOgpBbmQgZXZlbiB0aGUgbGlrZSBw
cmVjdXJzZSBvZiBmaWVyY2UgZXZlbnRzLApBcyBoYXJiaW5nZXJzIHByZWNlZGlu
ZyBzdGlsbCB0aGUgZmF0ZXMKQW5kIHByb2xvZ3VlIHRvIHRoZSBvbWVuIGNvbWlu
ZyBvbiwKSGF2ZSBoZWF2ZW4gYW5kIGVhcnRoIHRvZ2V0aGVyIGRlbW9uc3RyYXRl
ZApVbnRvIG91ciBjbGltYXR1cmVzIGFuZCBjb3VudHJ5bWVuLi0tCkJ1dCBzb2Z0
LCBiZWhvbGQhIGxvLCB3aGVyZSBpdCBjb21lcyBhZ2FpbiEKUmUtZW50ZXIgR2hv
c3QKCkknbGwgY3Jvc3MgaXQsIHRob3VnaCBpdCBibGFzdCBtZS4gU3RheSwgaWxs
dXNpb24hCklmIHRob3UgaGFzdCBhbnkgc291bmQsIG9yIHVzZSBvZiB2b2ljZSwK
U3BlYWsgdG8gbWU6CklmIHRoZXJlIGJlIGFueSBnb29kIHRoaW5nIHRvIGJlIGRv
bmUsClRoYXQgbWF5IHRvIHRoZWUgZG8gZWFzZSBhbmQgZ3JhY2UgdG8gbWUsClNw
ZWFrIHRvIG1lOgpDb2NrIGNyb3dzCgpJZiB0aG91IGFydCBwcml2eSB0byB0aHkg
Y291bnRyeSdzIGZhdGUsCldoaWNoLCBoYXBwaWx5LCBmb3Jla25vd2luZyBtYXkg
YXZvaWQsIE8sIHNwZWFrIQpPciBpZiB0aG91IGhhc3QgdXBob2FyZGVkIGluIHRo
eSBsaWZlCkV4dG9ydGVkIHRyZWFzdXJlIGluIHRoZSB3b21iIG9mIGVhcnRoLApG
b3Igd2hpY2gsIHRoZXkgc2F5LCB5b3Ugc3Bpcml0cyBvZnQgd2FsayBpbiBkZWF0
aCwKU3BlYWsgb2YgaXQ6IHN0YXksIGFuZCBzcGVhayEgU3RvcCBpdCwgTWFyY2Vs
bHVzLgpNQVJDRUxMVVMKU2hhbGwgSSBzdHJpa2UgYXQgaXQgd2l0aCBteSBwYXJ0
aXNhbj8KSE9SQVRJTwpEbywgaWYgaXQgd2lsbCBub3Qgc3RhbmQuCkJFUk5BUkRP
CidUaXMgaGVyZSEKSE9SQVRJTwonVGlzIGhlcmUhCk1BUkNFTExVUwonVGlzIGdv
bmUhCkV4aXQgR2hvc3Q=